{"version":3,"sources":["webpack:///webpack/bootstrap 884dc1665f7f9e89ee97","webpack:///./library/js/scripts.js"],"names":["updateViewportDimensions","w","window","d","document","e","documentElement","g","getElementsByTagName","x","innerWidth","clientWidth","y","innerHeight","clientHeight","width","height","viewport","loadGravatars","jQuery","each","attr","ready"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;ACtCA;;;;;;;;;;;;;;AAeA;;;;;AAKA;AACA,UAASA,wBAAT,GAAoC;AACnC;;AACA,OAAIC,IAAIC,MAAR;AAAA,OACEC,IAAIC,QADN;AAAA,OAEEC,IAAIF,EAAEG,eAFR;AAAA,OAGEC,IAAIJ,EAAEK,oBAAF,CAAuB,MAAvB,EAA+B,CAA/B,CAHN;AAAA,OAIEC,IAAIR,EAAGS,UAAH,IAAiBL,EAAEM,WAAnB,IAAkCJ,EAAEI,WAJ1C;AAAA,OAKEC,IAAIX,EAAEY,WAAF,IAAiBR,EAAES,YAAnB,IAAmCP,EAAEO,YAL3C;;AAOA,UAAO;AACNC,YAAMN,CADA;AAENO,aAAOJ;AAFD,IAAP;AAIA;AACD;AACA,KAAIK,WAAWjB,0BAAf;AACA;;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;;;;;;;AAOA;AACA,UAASkB,aAAT,GAAyB;AACxB;AACC;;AACAD,cAAWjB,0BAAX;AACA;AACA,OAAIiB,SAASF,KAAT,IAAkB,GAAtB,EAA2B;AAC1BI,YAAO,6BAAP,EAAsCC,IAAtC,CAA2C,YAAU;AACnDD,cAAO,IAAP,EAAaE,IAAb,CAAkB,KAAlB,EAAwBF,OAAO,IAAP,EAAaE,IAAb,CAAkB,eAAlB,CAAxB;AACD,MAFD;AAGD;AACD,E,CAAC;AACF;;AAEA;;;AAGAF,QAAOf,QAAP,EAAiBkB,KAAjB,CAAuB,YAAW;AACjC;;AAEC;;;;;AAIDJ;AAEA,EATD,E,CASI,iC","file":"scripts.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 884dc1665f7f9e89ee97\n **/","/*\n * Bones Scripts File\n * Author: Eddie Machado\n *\n * This file should contain any js scripts you want to add to the site.\n * Instead of calling it in the header or throwing it inside wp_head()\n * this file will be called automatically in the footer so as not to\n * slow the page load.\n *\n * There are a lot of example functions and tools in here. If you don't\n * need any of it, just remove it. They are meant to be helpers and are\n * not required. It's your world baby, you can do whatever you want.\n*/\n\n\n/*\n * Get Viewport Dimensions\n * returns object with viewport dimensions to match css in width and height properties\n * ( source: http://andylangton.co.uk/blog/development/get-viewport-size-width-and-height-javascript )\n*/\n/*eslint-disable */\nfunction updateViewportDimensions() {\n\t'use strict';\n\tvar w = window,\n\t\t\td = document,\n\t\t\te = d.documentElement,\n\t\t\tg = d.getElementsByTagName('body')[0],\n\t\t\tx = w .innerWidth || e.clientWidth || g.clientWidth,\n\t\t\ty = w.innerHeight || e.clientHeight || g.clientHeight;\n\n\treturn {\n\t\twidth:x,\n\t\theight:y\n\t};\n}\n// setting the viewport width\nvar viewport = updateViewportDimensions();\n/*eslint-enable */\n\n/*\n * Throttle Resize-triggered Events\n * Wrap your actions in this function to throttle the frequency of firing them off, for better performance, esp. on mobile.\n * ( source: http://stackoverflow.com/questions/2854407/javascript-jquery-window-resize-how-to-fire-after-the-resize-is-completed )\n*/\n// var waitForFinalEvent = (function () {\n// \tvar timers = {};\n// \treturn function (callback, ms, uniqueId) {\n// \t\tif (!uniqueId) { uniqueId = \"Don't call this twice without a uniqueId\"; }\n// \t\tif (timers[uniqueId]) { clearTimeout (timers[uniqueId]); }\n// \t\ttimers[uniqueId] = setTimeout(callback, ms);\n// \t};\n// })();\n\n// how long to wait before deciding the resize has stopped, in ms. Around 50-100 should work ok.\n// var timeToWaitForLast = 100;\n\n\n/*\n * Here's an example so you can see how we're using the above function\n *\n * This is commented out so it won't work, but you can copy it and\n * remove the comments.\n *\n *\n *\n * If we want to only do it on a certain page, we can setup checks so we do it\n * as efficient as possible.\n *\n * if( typeof is_home === \"undefined\" ) var is_home = $('body').hasClass('home');\n *\n * This once checks to see if you're on the home page based on the body class\n * We can then use that check to perform actions on the home page only\n *\n * When the window is resized, we perform this function\n * $(window).resize(function () {\n *\n *    // if we're on the home page, we wait the set amount (in function above) then fire the function\n *    if( is_home ) { waitForFinalEvent( function() {\n *\n *\t// update the viewport, in case the window size has changed\n *\tviewport = updateViewportDimensions();\n *\n *      // if we're above or equal to 768 fire this off\n *      if( viewport.width >= 768 ) {\n *        console.log('On home page and window sized to 768 width or more.');\n *      } else {\n *        // otherwise, let's do this instead\n *        console.log('Not on home page, or window sized to less than 768.');\n *      }\n *\n *    }, timeToWaitForLast, \"your-function-identifier-string\"); }\n * });\n *\n * Pretty cool huh? You can create functions like this to conditionally load\n * content and other stuff dependent on the viewport.\n * Remember that mobile devices and javascript aren't the best of friends.\n * Keep it light and always make sure the larger viewports are doing the heavy lifting.\n *\n*/\n\n/*\n * We're going to swap out the gravatars.\n * In the functions.php file, you can see we're not loading the gravatar\n * images on mobile to save bandwidth. Once we hit an acceptable viewport\n * then we can swap out those images since they are located in a data attribute.\n*/\n\n/*eslint-disable */\nfunction loadGravatars() {\n\t'use strict';\n  // set the viewport using the function above\n  viewport = updateViewportDimensions();\n  // if the viewport is tablet or larger, we load in the gravatars\n  if (viewport.width >= 768) {\n\t  jQuery('.comment img[data-gravatar]').each(function(){\n\t    jQuery(this).attr('src',jQuery(this).attr('data-gravatar'));\n\t  });\n\t}\n} // end function\n/*eslint-enable */\n\n/*\n * Put all your regular jQuery in here.\n*/\njQuery(document).ready(function() {\n\t'use strict';\n\n  /*\n   * Let's fire off the gravatar function\n   * You can remove this if you don't need it\n  */\n\tloadGravatars();\n\n}); /* end of as page load scripts */\n\n\n\n/** WEBPACK FOOTER **\n ** ./library/js/scripts.js\n **/"],"sourceRoot":""}